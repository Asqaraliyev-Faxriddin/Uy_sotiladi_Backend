generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  BUY
  SELL
  ADMIN
}

enum PaidVia {
  PAYME
  CLICK
  CASH
}

model Users {
  id         String     @id @default(uuid())
  firstName  String
  lastName   String
  email      String     @unique
  role       UserType   @default(BUY)
  password   String
  profileImg String?

  houses           Housess[]
  favorites        Favorite[]
  purchasedCourse  PurchasedCourse[]
  ratings          Rating[]
  contacts         Contact[]

  @@map("users")
}

model Housess {
  id            String     @id @default(uuid())
  img           String?
  title         String
  address       String
  country       String?
  price         Float
  discount      Float?
  build_year    DateTime?
  description   String?
  features      Json?
  extraFeatures Json?
  isActive      Boolean    @default(true)
  documents     Json?

  userId     String
  categoryId BigInt

  user      Users      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  category  Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  location  Location?
  favorites Favorite[]
  ratings   Rating[]
  contacts  Contact[]
  purchases PurchasedCourse[]

  @@map("houses")
}

model Location {
  id        Int     @id @default(autoincrement())
  map_url   String?
  latitude  String?
  longitude String?
  houseId   String  @unique

  house Housess @relation(fields: [houseId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("locations")
}

model PurchasedCourse {
  id          String   @id @default(uuid())
  houseId     String
  userId      String
  amount      Decimal?
  paidVia     PaidVia
  purchasedAt DateTime @default(now())
  createdAt   DateTime @default(now())

  house Housess @relation(fields: [houseId], references: [id], onDelete: Cascade)
  user  Users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("purchasedcourses")
}

model Favorite {
  id      BigInt  @id @default(autoincrement())
  like    Boolean
  userId  String
  houseId String

  user  Users   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  house Housess @relation(fields: [houseId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("favorites")
}

model Category {
  id    BigInt   @id @default(autoincrement())
  name  String
  img   String?
  icon  String?

  houses Housess[]

  @@map("categories")
}

model Contact {
  id      BigInt   @id @default(autoincrement())
  date    DateTime
  time    String
  name    String
  phone   String
  message String?
  email   String?
  userId  String
  houseId String

  user  Users   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  house Housess @relation(fields: [houseId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("contacts")
}

model Rating {
  id         BigInt   @id @default(autoincrement())
  houseId    String
  userId     String
  cleanLines Float?
  location   Float?
  accuracy   Float?

  user  Users   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  house Housess @relation(fields: [houseId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("ratings")
}
